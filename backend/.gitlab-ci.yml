stages:
  - code-analysis
  - file-scan
  - image-build
  - image-scan
  - dp-check
  - image-push
  - cloning-repo
  - updating-deployment-file

variables:
  DOCKER_DRIVER: overlay2
  CI_DEBUG_TRACE: "true"

# Code Vulnerability Analysis
sonarqube-check:
  stage: code-analysis
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main

# File Scan using Trivy
trivy-file-scan:
  stage: file-scan
  tags:
    - backend
  before_script:
    - mkdir -p trivy-file-scan
  script: 
    - trivy fs . -o trivy-file-scan/trivy-file-scan-backend:$CI_PIPELINE_IID.txt
  artifacts:
    paths:
      - "trivy-file-scan"
    expire_in: 30 days

# Docker Image Building
image-building:
  stage: image-build
  tags:
    - backend
  image:
    name: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $BACKEND_ACR_USERNAME/backend:$CI_PIPELINE_IID .

# ACR Image Scanning
image-scan:
  stage: image-scan
  tags:
    - backend
  before_script:
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
  script:
    - mkdir -p trivy-image-scan
    - trivy image --severity HIGH,CRITICAL $BACKEND_ACR_USERNAME/backend:$CI_PIPELINE_IID -o trivy-image-scan/trivy-image-scan-backend:$CI_PIPELINE_IID.txt
  artifacts:
    paths:
      - "trivy-image-scan/"
    expire_in: 30 days

# Dependency Check Running
dp-check:
  stage: dp-check
  image:
    name: owasp/dependency-check
    entrypoint: [""]
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --scan .
  artifacts:
    paths:
      - "/reports/dependency-check"
    expire_in: 30 days

# Pushing Image to ACR
image-pushing-to-acr:
  stage: image-push
  tags:
    - backend
  image:
    name: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$BACKEND_ACR_PASSWORD" | docker login $BACKEND_ACR_USERNAME -u $BACKEND_ACR_REGISTRY --password-stdin
  script: 
    - docker push $BACKEND_ACR_USERNAME/backend:$CI_PIPELINE_IID
    - docker rmi -f $BACKEND_ACR_USERNAME/backend:$CI_PIPELINE_IID

# Cloning the Manifest Repo
repo-cloning:
  stage: cloning-repo
  tags:
    - backend
  script:
    - git clone https://oauth2:${GITLAB_TOKEN}@gitlab.com/azure-devsecops-project462642/kubernetes-manifests/manifests.git
  artifacts:
    paths:
      - manifests/
    expire_in: 1 week

# Updating & Pushing Changes
updating-image-tag:
  stage: updating-deployment-file
  tags:
    - backend
  script:
    - cd manifests/Backend/
    - imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
    - sed -i "s/${BACKEND_ACR_USERNAME}\/backend:$imageTag/${BACKEND_ACR_USERNAME}\/backend:$CI_PIPELINE_IID/" deployment.yaml
    - git config --global user.email ${GITLAB_ID}
    - git config --global user.name ${GITLAB_USERNAME}
    - git add deployment.yaml
    - git commit -m "Update deployment Image to version $CI_PIPELINE_IID"
    - git push origin main
  when: manual
